
@{
    Layout = null;
}
@using Motel.ViewModels
@model ExportXuatHoaDon
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, YourProjetcName
<style>
    * {
        box-sizing: border-box;
        border-color: black;
    }

    body {
        font-family: 'Times New Roman', Times, serif;
        font-size: larger;
    }

    .header {
        padding: 10px;
        text-align: center;
        font-size: 35px;
    }

    .column {
        text-align: center;
        float: left;
        width: 50%;
        padding: 10px;
        padding-left: 20px;
        height: auto;
    }

    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    .content {
        padding: 10px;
        height: auto;
    }

    th, td {
        text-align: center;
        padding: 10px;
    }

    .footer {
        padding: 10px;
        text-align: center;
        height: auto;
    }
</style>
<form id="formHD">

    <h2 style="text-align:center;">------***------</h2>
    <h2 style="text-align:center; ">HÓA ĐƠN TIỀN NHÀ</h2>

    <div class="form-group form-md-line-input row">
        <div class="column" style="text-align:left">
            <h3>Thông tin khách hàng</h3>
            <label class="control-label">Họ tên: @Model.khachHang.TenKH </label><br />
            <label class="control-label">Địa chỉ phòng: @Model.phong.Ten </label><br />

        </div>
        <div class="column" style="text-align:left">
            <h3>Thông tin hóa đơn</h3>
            <label class="control-label">Tháng năm: @Model.ThangNam </label><br />

            <label class="control-label">Loại hóa đơn: Hóa đơn hàng tháng</label><br />
        </div>
    </div>
    <br />
    <fieldset>
        <div class="form-group">
            <div class="col-md-12">
                <div class="table-scrollable">
                    <table class="table table-bordered table-hover service-table">
                        <thead>
                        </thead>
                        <tbody class="services">
                            <tr>
                                <td>
                                    Tiền phòng:
                                </td>
                                <td>
                                    @Model.phong.Gia
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="table-scrollable">
                    <table class="table table-bordered table-hover service-table">
                        <thead>
                            <tr>
                                <th>Tên dịch vụ</th>
                                <th width="80">Đơn vị</th>
                                <th>Đơn giá (đ)</th>
                                <th width="270">Số lượng</th>
                                <th width="185">Thành tiền (đ)</th>
                            </tr>
                        </thead>
                        <tbody class="services">
                            @for (int i = 0; i < Model.listDichVu.Count(); i++)
                            {
                                @if (@Model.listDichVu[i].MacDinh == false)
                                {
                                    <tr>
                                        <td>
                                            @Model.listDichVu[i].Ten
                                        </td>
                                        <td>
                                            @Model.listDichVu[i].TenDonVi
                                        </td>
                                        <td>
                                            @Model.listDichVu[i].Gia
                                        </td>
                                        <td>
                                            @Model.listDichVu[i].SoLuong
                                        </td>
                                        <td>
                                            @Model.listDichVu[i].ThanhTien
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td>
                                            @Model.listDichVu[i].Ten
                                        </td>
                                        <td>
                                            @Model.listDichVu[i].TenDonVi
                                        </td>
                                        <td>
                                            @Model.listDichVu[i].Gia
                                        </td>
                                        <td>
                                            @if (@Model.listDichVu[i].Ten == "Điện")
                                            {
                                                <div class="form-line-input" style="display: inline-flex;">
                                                    <div>@Model.dienNuoc.TieuThuDien</div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="form-line-input" style="display: inline-flex;">
                                                    <div>@Model.dienNuoc.TieuThuNuoc</div>
                                                </div>
                                            }
                                        </td>
                                        <td>
                                            @Model.listDichVu[i].ThanhTien
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </fieldset>
    <br />
    <div class="form-group form-md-line-input row">
        <label class="control-label">Tổng tiền Phòng: @Model.phong.Gia </label><br />
        <label class="control-label">Tổng tiền dịch vụ: @Model.TongTienDichVu </label><br />
        <label class="control-label">Tổng tiền điện nước: @Model.TongTienDienNuoc </label><br />
        <h4 class="control-label">Thành tiền: @Model.ThanhTienHoaDon </h4><br />
    </div>




    <i style="padding-right:10px;">..........Ngày...Tháng...Năm.......</i>
    <div class="footer">

        <div class="column">
            <p style="font-size:x-large;">Người nộp</p>
            <i> (Ký, ghi rõ họ tên)</i>
            <br />
            <br />
            <br />
            <p>@Model.khachHang.TenKH</p>
        </div>
        <div class="column">
            <p style="font-size:x-large;">Người thu</p>
            <i> (Ký, ghi rõ họ tên)</i>
            <br />
            <br />
            <br />
            <p>@Model.chuTro.HoTen</p>

        </div>

    </div>

</form>

<script>
    $(function () {

    });

    $(document).ready(function () {
        $(".form_datetime").datetimepicker({
            autoclose: true,
            isRTL: App.isRTL(),
            language: 'vi',
            format: "dd/mm/yyyy hh:ii",
            pickerPosition: (App.isRTL() ? "bottom-right" : "bottom-left")
        });

        $('.btnExportWithPrint').click(function () {
            $('#admin_bill_print').val(1);
        });
        calculateTotalFirtLoading();
        // Format cho dự nợ trước và sau khi load dữ liệu ra
        // Dư nợ cũ
        var debt_amount = format_number(parseInt(($('#debt_amount').val() === '' || $('#debt_amount').val() === null || typeof $('#debt_amount').val() === 'undefined') ? '0' : $('#debt_amount').val().replace(/[.]/g, '')) || 0);
        $('#debt_amount').val(debt_amount);

        // Dư nợ mới
        var remain_amount = format_number(parseInt(($('#remain_amount').val() === '' || $('#remain_amount').val() === null || typeof $('#remain_amount').val() === 'undefined') ? '0' : $('#remain_amount').val().replace(/[.]/g, '')) || 0);
        $('#remain_amount').val(remain_amount);

        var total_amount = format_number(parseInt(($('#total_amount').val() === '' || $('#total_amount').val() === null || typeof $('#total_amount').val() === 'undefined') ? '0' : $('#total_amount').val().replace(/[.]/g, '')) || 0);
        $('#total_amount').val(total_amount);

        var total_amount_sumary = format_number(parseInt(($('#total_amount_sumary').val() === '' || $('#total_amount_sumary').val() === null || typeof $('#total_amount_sumary').val() === 'undefined') ? '0' : $('#total_amount_sumary').val().replace(/[.]/g, '')) || 0);
        $('#total_amount_sumary').val(total_amount_sumary);

        var payment_amount = format_number(parseInt(($('#payment_amount').val() === '' || $('#payment_amount').val() === null || typeof $('#payment_amount').val() === 'undefined') ? '0' : $('#payment_amount').val().replace(/[.]/g, '')) || 0);
        $('#payment_amount').val(payment_amount);

        // Thanh toán => Thay đổi dư nợ.
        $('#payment_amount').change(function () {

            var total_amount_sumary = parseInt(($('#total_amount_sumary').val() === '' || $('#total_amount_sumary').val() === null || typeof $('#total_amount_sumary').val() === 'undefined') ? '0' : $('#total_amount_sumary').val().replace(/[.]/g, '')) || 0;
            var payment_amount = parseInt(($('#payment_amount').val() === '' || $('#payment_amount').val() === null || typeof $('#payment_amount').val() === 'undefined') ? '0' : $('#payment_amount').val().replace(/[.]/g, '')) || 0;
            var use_prepayment_remain = parseInt(($('#use_prepayment_remain').val() === '' || $('#use_prepayment_remain').val() === null || typeof $('#use_prepayment_remain').val() === 'undefined') ? '0' : $('#use_prepayment_remain').val().replace(/[.]/g, '')) || 0;
            var downpayment = parseInt(($('#downpayment').val() === '' || $('#downpayment').val() === null || typeof $('#downpayment').val() === 'undefined') ? '0' : $('#downpayment').val().replace(/[.]/g, '')) || 0;


            remain_amount = 0

            if ($('#is_use_prepayment_remain').is(':checked')) {
                remain_amount = remain_amount + use_prepayment_remain;
            }

            if ($('#is_downpayment').is(':checked')) {
                remain_amount = remain_amount + downpayment;
            }

            if (remain_amount <= 0) {
                $('#remain_amount').val(format_number(payment_amount - total_amount_sumary));
            }
            else {
                $('#remain_amount').val(format_number(remain_amount + (payment_amount - total_amount_sumary)));
            }
        })

        $('#bill_status').change(function () {
            if ($(this).is(':checked')) {
                $('.bill-date').show();
                var billDate = new Date();
                var billDateStr = l_pad(billDate.getDate(), 2, '0') + "/" + l_pad((billDate.getMonth() + 1), 2, '0') + "/" + billDate.getFullYear() + " " + l_pad(billDate.getHours(), 2, '0') + ":" + l_pad(billDate.getMinutes(), 2, '0');
                $('#bill_date').val(billDateStr);
            }
            else {
                $('.bill-date').hide();
            }
        });

        // Chi phí khác => Thay đổi tổng, dư nợ thay đổi.
        $('#other_cost').change(function () {
            calculateTotal();
        });
        // Khấu trừ => Thay đổi tổng, dư nợ thay đổi.
        $('#discount').change(function () {
            calculateTotal();
        });

        // Tất toán tiền trả trước.
        $('#is_use_prepayment_remain').change(function () {
            calculateTotal();
        });

        // Tất toán tiền đặt cọc.
        $('#is_downpayment').change(function () {
            calculateTotal();
        });

        /* Xử lý thay đổi trên từng dịch vụ trên bảng dịch vụ */
        $('#start-electricity, #end-electricity').keyup(function () {
            $(this).val(($(this).val() === '' || $(this).val() === null || typeof $(this).val() === 'undefined' || !$.isNumeric($(this).val().replace(/[.]/g, ''))) ? '' : format_number(parseInt($(this).val().replace(/[.]/g, '')) || 0));
            if (event.which == 13) {
                caculateAmount(this, $('#start-electricity').val(), $('#end-electricity').val(), 1)
            }
        });

        $('#start-electricity, #end-electricity').change(function () {
            $(this).val(($(this).val() === '' || $(this).val() === null || typeof $(this).val() === 'undefined' || !$.isNumeric($(this).val().replace(/[.]/g, ''))) ? '' : format_number(parseInt($(this).val().replace(/[.]/g, '')) || 0));
            caculateAmount(this, $('#start-electricity').val(), $('#end-electricity').val(), 1)
        });

        $('#start-water, #end-water').keyup(function () {
            $(this).val(($(this).val() === '' || $(this).val() === null || typeof $(this).val() === 'undefined' || !$.isNumeric($(this).val().replace(/[.]/g, ''))) ? '' : format_number(parseInt($(this).val().replace(/[.]/g, '')) || 0));
            if (event.which == 13) {
                caculateAmount(this, $('#start-water').val(), $('#end-water').val(), 2)
            }
        });

        $('#start-water, #end-water').change(function () {
            $(this).val(($(this).val() === '' || $(this).val() === null || typeof $(this).val() === 'undefined' || !$.isNumeric($(this).val().replace(/[.]/g, ''))) ? '' : format_number(parseInt($(this).val().replace(/[.]/g, '')) || 0));
            caculateAmount(this, $('#start-water').val(), $('#end-water').val(), 2)
        });

        function caculateAmount(selector, start, end, type) {
            if (start == '' && end == '') {
                if (type == 1) {
                    $('#amount-electricity').val('');
                }
                if (type == 2) {
                    $('#amount-water').val('');
                }
            }
            else {
                var start = parseInt(start.replace(/[.]/g, '')) || 0;
                if (end != '') {
                    var end = parseInt(end.replace(/[.]/g, '')) || 0;
                    var amount = end - start
                    // Dư nợ = Thanh toán - tổng tiền.
                    if (type == 1) {
                        $('#amount-electricity').val(format_number(amount));
                    }
                    if (type == 2) {
                        $('#amount-water').val(format_number(amount));
                    }
                }
                else {
                    if (type == 1) {
                        $('#amount-electricity').val('');
                    }
                    if (type == 2) {
                        $('#amount-water').val('');
                    }
                }
            }

            var service = $(selector).closest('tr');
            selectorChange(service);
        }

        $('.service-input').change(function () {
            var service = $(this).closest('tr');
            selectorChange(service);
        });

        // Dịch vụ thay đổi (gồm đơn giá và số lượng => Thành tiền thay đổi).
        function selectorChange(service) {

            // Lấy giá trị của unit_price
            var unitPriceSelector = service.find('.unit-price-service');
            var amountSelector = service.find('.amount-service');
            var subTotalSelector = service.find('.subtotal-service');
            var formulaIdSelector = service.find('.formula-id-service');
            var formulaTypeSelector = service.find('.formula-type-service');
            var serviceIdSelector = service.find('.service-id');
            var prepaymentStatusServiceSelector = service.find('.prepayment-status-service');
            var prepaymentValueServiceSelector = service.find('.prepayment-value-service');
            var prepaymentValueServiceHiddenSelector = service.find('.prepayment-value-service-hidden');
            var prepaymentStatusServiceUncheckSelector = service.find('.prepayment-status-service-uncheck');

            var usePrepaymentRemainSelector = $('#use_prepayment_remain'); // Số tiền trả trước còn lại

            if (formulaTypeSelector.val() != 3) {

                var unitPrice = parseInt(unitPriceSelector.val().replace(/[.]/g, '')) || 0;
                var amount = parseInt(amountSelector.val().replace(/[.]/g, '')) || 0;
                var usePrepaymentRemain = caculatePrepaymentRemain(serviceIdSelector, false);

                // Nếu trạng thái trả trước là check
                if (prepaymentStatusServiceSelector.is(':checked')) {
                    prepaymentStatusServiceUncheckSelector.prop('disabled', true);
                    prepaymentValueServiceSelector.html(format_number(usePrepaymentRemain - amount * unitPrice > 0 ? amount * unitPrice : usePrepaymentRemain));
                    prepaymentValueServiceHiddenSelector.val(usePrepaymentRemain - amount * unitPrice > 0 ? amount * unitPrice : usePrepaymentRemain);
                    usePrepaymentRemainSelector.val(format_number(caculatePrepaymentRemain(serviceIdSelector, true)));
                }
                else {
                    prepaymentStatusServiceUncheckSelector.prop('disabled', false);
                    prepaymentValueServiceSelector.html(format_number(0));
                    prepaymentValueServiceHiddenSelector.val(0);
                    usePrepaymentRemainSelector.val(format_number(caculatePrepaymentRemain(serviceIdSelector, true)));
                }

                // Thành tiền
                if (formulaTypeSelector.val() == 1 && serviceIdSelector.val() == 18331) {
                    subTotalSelector.attr("data-original-title", '' + format_number(unitPrice) + ' * ' + format_number(amount) + ' = ' + format_number((unitPrice * amount)));

                    if (prepaymentStatusServiceSelector.is(':checked')) {
                        subTotalSelector.val(usePrepaymentRemain - amount * unitPrice > 0 ? 0 : amount * unitPrice - usePrepaymentRemain);
                    }
                    else {
                        subTotalSelector.val(amount * unitPrice);
                    }
                    format_total(subTotalSelector);
                }
                else if (formulaTypeSelector.val() == 1 && serviceIdSelector.val() == 18332) {
                    subTotalSelector.attr("data-original-title", '' + format_number(unitPrice) + ' * ' + format_number(amount) + ' = ' + format_number(unitPrice * amount));
                    if (prepaymentStatusServiceSelector.is(':checked')) {
                        subTotalSelector.val(usePrepaymentRemain - amount * unitPrice > 0 ? 0 : amount * unitPrice - usePrepaymentRemain);
                    }
                    else {
                        subTotalSelector.val(amount * unitPrice);
                    }
                    format_total(subTotalSelector);
                }
                else {
                    if (prepaymentStatusServiceSelector.is(':checked')) {
                        subTotalSelector.val(usePrepaymentRemain - amount * unitPrice > 0 ? 0 : amount * unitPrice - usePrepaymentRemain);
                    }
                    else {
                        subTotalSelector.val(amount * unitPrice);
                    }

                    format_total(subTotalSelector);
                    subTotalSelector.attr("data-original-title", '' + format_number(unitPrice) + ' * ' + format_number(amount) + ' = ' + format_number(unitPrice * amount));
                }
                // Tổng
                calculateTotal();
            }
            else {
                /*Gọi Ajax, truyền tham số là $formulaIdSelector & $amountSelector*/
                $.ajax({
                    type: "GET",
                    url: '/admin/bills/ajax_sumary_by_formula',
                    dataType: 'json',
                    data: {
                        service: {
                            formula_id: parseInt(formulaIdSelector.val().replace(/[.]/g, '')) || 0,
                            amount: parseInt(amountSelector.val().replace(/[.]/g, '')) || 0,
                            room: $('#admin_bill_room_id').val(),
                            service: serviceIdSelector.val(),
                        }
                    },
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                }).done(function (data) {

                    var subTotalSelector = service.find('.subtotal-service');
                    subTotalSelector.attr("data-original-title", data.detail_amount_html);

                    var totalAmount = data.total_amount

                    var usePrepaymentRemain = caculatePrepaymentRemain(serviceIdSelector, false);

                    // Nếu trạng thái trả trước là check
                    if (prepaymentStatusServiceSelector.is(':checked')) {
                        prepaymentStatusServiceUncheckSelector.prop('disabled', true);
                        prepaymentValueServiceSelector.html(format_number(usePrepaymentRemain - totalAmount > 0 ? totalAmount : usePrepaymentRemain));
                        prepaymentValueServiceHiddenSelector.val(usePrepaymentRemain - totalAmount > 0 ? totalAmount : usePrepaymentRemain);
                        usePrepaymentRemainSelector.val(format_number(caculatePrepaymentRemain(serviceIdSelector, true)));
                    }
                    else {
                        prepaymentStatusServiceUncheckSelector.prop('disabled', false);
                        prepaymentValueServiceSelector.html(format_number(0));
                        prepaymentValueServiceHiddenSelector.val(0);
                        usePrepaymentRemainSelector.val(format_number(caculatePrepaymentRemain(serviceIdSelector, true)));
                    }

                    if (prepaymentStatusServiceSelector.is(':checked')) {
                        subTotalSelector.val(usePrepaymentRemain - totalAmount > 0 ? 0 : totalAmount - usePrepaymentRemain);
                    }
                    else {
                        subTotalSelector.val(totalAmount);
                    }
                    format_total(subTotalSelector);

                    // Tổng
                    calculateTotal();
                })
            }
        }

        function caculatePrepaymentRemain(serviceIdSelector, excludeCurrentService) {
            var serviceList = $('.service-table');
            var rowsService = serviceList.find('> tbody > tr');

            // Tổng dịch vụ
            var prepaymentValueTotal = 0
            rowsService.each(function () {
                var prepaymentStatusServiceSelector = $(this).find('.prepayment-status-service');
                var prepaymentValueServiceSelector = $(this).find('.prepayment-value-service');
                var serviceIdSelectorTmp = $(this).find('.service-id');

                // Nếu trạng thái trả trước là check
                if (excludeCurrentService == false) {
                    if (serviceIdSelectorTmp.val() != serviceIdSelector.val() && prepaymentStatusServiceSelector.is(':checked')) {
                        var prepaymentValue = parseInt((prepaymentValueServiceSelector.html() === '' || prepaymentValueServiceSelector.html() === null || typeof prepaymentValueServiceSelector.html() === 'undefined') ? '0' : prepaymentValueServiceSelector.html().replace(/[.]/g, '')) || 0;
                        prepaymentValueTotal = prepaymentValueTotal + prepaymentValue;
                    }
                }
                else {
                    if (prepaymentStatusServiceSelector.is(':checked')) {
                        var prepaymentValue = parseInt((prepaymentValueServiceSelector.html() === '' || prepaymentValueServiceSelector.html() === null || typeof prepaymentValueServiceSelector.html() === 'undefined') ? '0' : prepaymentValueServiceSelector.html().replace(/[.]/g, '')) || 0;
                        prepaymentValueTotal = prepaymentValueTotal + prepaymentValue;
                    }
                }
            });

            var prepaymentRemainBeforeElement = $('.prepayment-remain-before');
            var prepaymentRemainBefore = parseInt((prepaymentRemainBeforeElement.html() === '' || prepaymentRemainBeforeElement.html() === null || typeof prepaymentRemainBeforeElement.html() === 'undefined') ? '0' : prepaymentRemainBeforeElement.html().replace(/[.]/g, '')) || 0;

            return prepaymentRemainBefore - prepaymentValueTotal;
        }

        // Tính tổng.
        function calculateTotalFirtLoading() {
            var serviceList = $('.service-table');
            var rowsService = serviceList.find('> tbody > tr');

            // Tổng dịch vụ
            var total = 0
            rowsService.each(function () {
                var subTotalSelector = $(this).find('.subtotal-service');
                var subTotal = parseInt((subTotalSelector.val() === '' || subTotalSelector.val() === null || typeof subTotalSelector.val() === 'undefined') ? '0' : subTotalSelector.val().replace(/[.]/g, '')) || 0;
                total = total + subTotal;
            });

            $('#sub_total').val(format_number(total));

            // Chi phí khác.
            var other_cost = parseInt(($('#other_cost').val() === '' || $('#other_cost').val() === null || typeof $('#other_cost').val() === 'undefined') ? '0' : $('#other_cost').val().replace(/[.]/g, '')) || 0;
            var discount = parseInt(($('#discount').val() === '' || $('#discount').val() === null || typeof $('#discount').val() === 'undefined') ? '0' : $('#discount').val().replace(/[.]/g, '')) || 0;
            var debt_amount = parseInt(($('#debt_amount').val() === '' || $('#debt_amount').val() === null || typeof $('#debt_amount').val() === 'undefined') ? '0' : $('#debt_amount').val().replace(/[.]/g, '')) || 0;

            var use_prepayment_remain = parseInt(($('#use_prepayment_remain').val() === '' || $('#use_prepayment_remain').val() === null || typeof $('#use_prepayment_remain').val() === 'undefined') ? '0' : $('#use_prepayment_remain').val().replace(/[.]/g, '')) || 0;
            var downpayment = parseInt(($('#downpayment').val() === '' || $('#downpayment').val() === null || typeof $('#downpayment').val() === 'undefined') ? '0' : $('#downpayment').val().replace(/[.]/g, '')) || 0;

            // Thanh toán
            // Dư nợ
            // Tổng = Chi phí khác + Dư nợ cũ + chi phí khác.
            $('#total_amount').val(format_number(other_cost + debt_amount + total));
            $('#total_amount_sumary').val(format_number(other_cost + debt_amount + total - discount));


            if ($('#bill_status').is(':checked')) {
                $('.bill-date').show();
            }
            else {
                $('.bill-date').hide();
            }
        }

        // Tính tổng.
        function calculateTotal() {
            var serviceList = $('.service-table');
            var rowsService = serviceList.find('> tbody > tr');

            // Tổng dịch vụ
            var total = 0
            rowsService.each(function () {
                var subTotalSelector = $(this).find('.subtotal-service');
                var subTotal = parseInt((subTotalSelector.val() === '' || subTotalSelector.val() === null || typeof subTotalSelector.val() === 'undefined') ? '0' : subTotalSelector.val().replace(/[.]/g, '')) || 0;
                total = total + subTotal;
            });

            $('#sub_total').val(format_number(total));

            // Chi phí khác.
            var other_cost = parseInt(($('#other_cost').val() === '' || $('#other_cost').val() === null || typeof $('#other_cost').val() === 'undefined') ? '0' : $('#other_cost').val().replace(/[.]/g, '')) || 0;
            var discount = parseInt(($('#discount').val() === '' || $('#discount').val() === null || typeof $('#discount').val() === 'undefined') ? '0' : $('#discount').val().replace(/[.]/g, '')) || 0;
            var debt_amount = parseInt(($('#debt_amount').val() === '' || $('#debt_amount').val() === null || typeof $('#debt_amount').val() === 'undefined') ? '0' : $('#debt_amount').val().replace(/[.]/g, '')) || 0;

            var use_prepayment_remain = parseInt(($('#use_prepayment_remain').val() === '' || $('#use_prepayment_remain').val() === null || typeof $('#use_prepayment_remain').val() === 'undefined') ? '0' : $('#use_prepayment_remain').val().replace(/[.]/g, '')) || 0;
            var downpayment = parseInt(($('#downpayment').val() === '' || $('#downpayment').val() === null || typeof $('#downpayment').val() === 'undefined') ? '0' : $('#downpayment').val().replace(/[.]/g, '')) || 0;

            // Thanh toán
            // Dư nợ
            // Tổng = Chi phí khác + Dư nợ cũ + chi phí khác.
            $('#total_amount').val(format_number(other_cost + debt_amount + total));
            $('#total_amount_sumary').val(format_number(other_cost + debt_amount + total - discount));

            remain_amount = 0
            if ($('#is_use_prepayment_remain').is(':checked')) {
                remain_amount = remain_amount + use_prepayment_remain;
            }

            if ($('#is_downpayment').is(':checked')) {
                remain_amount = remain_amount + downpayment;
            }

            if (other_cost + debt_amount + total - discount < 0 || remain_amount >= other_cost + debt_amount + total - discount) {
                $('#payment_amount').val(0);
            }
            else {
                var payment_amount = other_cost + debt_amount + total - discount - remain_amount;
                if (payment_amount >= 0) {
                    $('#payment_amount').val(format_number(payment_amount));
                }
                else {
                    $('#payment_amount').val(format_number(0));
                }
            }

            var payment_amount = parseInt(($('#payment_amount').val() === '' || $('#payment_amount').val() === null || typeof $('#payment_amount').val() === 'undefined') ? '0' : $('#payment_amount').val().replace(/[.]/g, '')) || 0;
            total_amount_sumary = other_cost + debt_amount + total - discount
            if (remain_amount <= payment_amount || payment_amount > 0) {
                if (total_amount_sumary < 0) {
                    $('#remain_amount').val(format_number(0 - total_amount_sumary));
                }
                else {
                    $('#remain_amount').val(format_number(0));
                }
            }
            else {
                $('#remain_amount').val(format_number(remain_amount - total_amount_sumary));
            }
        }

        // Format lại dư nợ (chủ động format cho số âm + dương)
        function format_number(n) {
            // Nếu số âm thì giữ dấu format xong rồi lại bổ sung dấu.
            var negative = '';
            if (n.toString().indexOf('-') >= 0) {
                n = parseInt(n.toString().replace('-', '')) || 0;
                negative = '-';
            }
            // Trả lại đúng giá trị sau khi format (kèm số âm và dương nếu có)
            return negative + n.toFixed(0).replace(/./g, function (c, i, a) {
                return i > 0 && c !== "," && (a.length - i) % 3 === 0 ? "." + c : c;
            });
        }

        function l_pad(string, pad_length, pad_string) {
            return (Array(pad_length).join(pad_string || ' ') + string).slice(-pad_length);
        }

        function r_pad(string, pad_length, pad_string) {
            return (string + Array(pad_length).join(pad_string || ' ')).slice(0, pad_length);
        }

        // Cập nhật format cho tổng (luôn > 0)
        function format_total(total) {
            $(total).priceFormat({
                prefix: '',
                thousandsSeparator: '.',
                centsLimit: 0,
                allowNegative: true
            });
        }

    });
</script>
